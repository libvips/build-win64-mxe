From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Thu, 29 Aug 2024 12:56:57 +0200
Subject: [PATCH 1/1] threadpool: fix a race condition during downsizing

Upstream-Status: Submitted [https://github.com/libvips/libvips/pull/4129]

diff --git a/ChangeLog b/ChangeLog
index 1111111..2222222 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -5,6 +5,7 @@
 - webpsave: fix memory leak on error [dloebl]
 - heifsave: ensure NCLX profile is freed in lossless mode [kleisauke]
 - threadpool: fix a race condition in error handling [kleisauke]
+- threadpool: fix a race condition during downsizing [kleisauke]
 
 11/8/24 8.15.3
 
diff --git a/libvips/iofuncs/threadpool.c b/libvips/iofuncs/threadpool.c
index 1111111..2222222 100644
--- a/libvips/iofuncs/threadpool.c
+++ b/libvips/iofuncs/threadpool.c
@@ -268,7 +268,7 @@ typedef struct _VipsThreadpool {
 	/* The number of workers queueing up on allocate_lock. Use this to
 	 * grow and shrink the threadpool.
 	 */
-	int n_waiting;
+	int n_waiting; // (atomic)
 
 	/* Set this to abort evaluation early with an error.
 	 */
@@ -281,7 +281,7 @@ typedef struct _VipsThreadpool {
 	/* Set this and the next worker to see it will clear the flag and exit
 	 * (used to downsize the threadpool).
 	 */
-	int exit;
+	gboolean exit; // (atomic)
 } VipsThreadpool;
 
 static int
@@ -328,7 +328,7 @@ vips_worker_work_unit(VipsWorker *worker)
 
 	/* Has a thread been asked to exit? Volunteer if yes.
 	 */
-	if (g_atomic_int_add(&pool->exit, -1) > 0) {
+	if (g_atomic_int_compare_and_exchange(&pool->exit, TRUE, FALSE)) {
 		/* A thread had been asked to exit, and we've grabbed the
 		 * flag.
 		 */
@@ -336,12 +336,6 @@ vips_worker_work_unit(VipsWorker *worker)
 		g_mutex_unlock(pool->allocate_lock);
 		return;
 	}
-	else {
-		/* No one had been asked to exit and we've mistakenly taken
-		 * the exit count below zero. Put it back up again.
-		 */
-		g_atomic_int_add(&pool->exit, 1);
-	}
 
 	if (vips_worker_allocate(worker)) {
 		pool->error = TRUE;
@@ -510,7 +504,7 @@ vips_threadpool_new(VipsImage *im)
 	vips_semaphore_init(&pool->tick, 0, "tick");
 	pool->error = FALSE;
 	pool->stop = FALSE;
-	pool->exit = 0;
+	pool->exit = FALSE;
 
 	/* If this is a tiny image, we won't need all max_workers threads.
 	 * Guess how
@@ -693,7 +687,7 @@ vips_threadpool_run(VipsImage *im,
 		if (n_waiting > 3 &&
 			n_working > 1) {
 			VIPS_DEBUG_MSG("shrinking thread pool\n");
-			g_atomic_int_add(&pool->exit, 1);
+			g_atomic_int_set(&pool->exit, TRUE);
 			n_working -= 1;
 		}
 		else if (n_waiting < 2 &&

This file is part of MXE. See LICENSE.md for licensing information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Fri, 14 Feb 2020 15:20:00 +0100
Subject: [PATCH 1/7] Add support for targeting ARM/ARM64

See: mxe/mxe#2330

diff --git a/Makefile b/Makefile
index 1111111..2222222 100644
--- a/Makefile
+++ b/Makefile
@@ -8,7 +8,8 @@ EXT_DIR  := $(TOP_DIR)/ext
 # See docs/gmsl.html for further information
 include $(EXT_DIR)/gmsl
 
-MXE_TRIPLETS       := i686-w64-mingw32 x86_64-w64-mingw32
+MXE_TRIPLETS       := i686-w64-mingw32 x86_64-w64-mingw32 \
+                      armv7-w64-mingw32 aarch64-w64-mingw32
 MXE_LIB_TYPES      := static shared
 MXE_TARGET_LIST    := $(strip $(foreach TRIPLET,$(MXE_TRIPLETS),\
                           $(addprefix $(TRIPLET).,$(MXE_LIB_TYPES))))
@@ -774,8 +775,10 @@ build-only-$(1)_$(3): BUILD_$(if $(findstring shared,$(3)),SHARED,STATIC) = TRUE
 build-only-$(1)_$(3): BUILD_$(if $(call seq,$(TARGET),$(BUILD)),NATIVE,CROSS) = TRUE
 build-only-$(1)_$(3): $(if $(findstring win32,$(TARGET)),WIN32,POSIX)_THREADS = TRUE
 build-only-$(1)_$(3): LIB_SUFFIX = $(if $(findstring shared,$(3)),dll,a)
-build-only-$(1)_$(3): BITS = $(if $(findstring x86_64,$(3)),64,32)
+build-only-$(1)_$(3): BITS = $(if $(or $(findstring x86_64,$(3)),$(findstring aarch64,$(3))),64,32)
 build-only-$(1)_$(3): PROCESSOR = $(firstword $(call split,-,$(3)))
+build-only-$(1)_$(3): IS_X86 = $(or $(findstring x86_64,$(3)),$(findstring i686,$(3)))
+build-only-$(1)_$(3): IS_ARM = $(or $(findstring armv7,$(3)),$(findstring aarch64,$(3)))
 build-only-$(1)_$(3): BUILD_TYPE = $(if $(findstring debug,$(3) $($(1)_CONFIGURE_OPTS)),debug,release)
 build-only-$(1)_$(3): BUILD_TYPE_SUFFIX = $(if $(findstring debug,$(3) $($(1)_CONFIGURE_OPTS)),d)
 build-only-$(1)_$(3): INSTALL_STRIP_TOOLCHAIN = install$(if $(STRIP_TOOLCHAIN),-strip)
diff --git a/plugins/meson-wrapper/conf/mxe-crossfile.meson.in b/plugins/meson-wrapper/conf/mxe-crossfile.meson.in
index 1111111..2222222 100644
--- a/plugins/meson-wrapper/conf/mxe-crossfile.meson.in
+++ b/plugins/meson-wrapper/conf/mxe-crossfile.meson.in
@@ -1,8 +1,8 @@
 # This file is part of MXE. See LICENSE.md for licensing information.
 
 [binaries]
-c = '@PREFIX@/bin/@TARGET@-gcc'
-cpp = '@PREFIX@/bin/@TARGET@-g++'
+c = '@PREFIX@/bin/@TARGET@-@CC@'
+cpp = '@PREFIX@/bin/@TARGET@-@CXX@'
 ar = '@PREFIX@/bin/@TARGET@-ar'
 ranlib = '@PREFIX@/bin/@TARGET@-ranlib'
 ld = '@PREFIX@/bin/@TARGET@-ld'
@@ -10,6 +10,10 @@ strip = '@PREFIX@/bin/@TARGET@-strip'
 windres = '@PREFIX@/bin/@TARGET@-windres'
 windmc = '@PREFIX@/bin/@TARGET@-windmc'
 pkgconfig = '@PREFIX@/bin/@TARGET@-pkg-config'
+glib-mkenums = '@PREFIX@/@TARGET@/bin/glib-mkenums'
+glib-genmarshal = '@PREFIX@/@TARGET@/bin/glib-genmarshal'
+glib-compile-schemas = '@PREFIX@/@TARGET@/bin/glib-compile-schemas'
+glib-compile-resources = '@PREFIX@/@TARGET@/bin/glib-compile-resources'
 # MXE forbids this
 # exe_wrapper = 'wine'
 
diff --git a/plugins/meson-wrapper/meson-wrapper.mk b/plugins/meson-wrapper/meson-wrapper.mk
index 1111111..2222222 100644
--- a/plugins/meson-wrapper/meson-wrapper.mk
+++ b/plugins/meson-wrapper/meson-wrapper.mk
@@ -16,11 +16,12 @@ define $(PKG)_BUILD
         -DTARGET=$(TARGET) \
         -DBUILD=$(BUILD) \
         -DCPU_FAMILY=$(strip \
-             $(if $(findstring x86_64,$(TARGET)),x86_64,\
-             $(if $(findstring i686,$(TARGET)),x86))) \
-        -DCPU=$(strip \
-             $(if $(findstring x86_64,$(TARGET)),x86_64,\
-             $(if $(findstring i686,$(TARGET)),i686))) \
+            $(if $(findstring armv7,$(PROCESSOR)),arm, \
+            $(if $(findstring i686,$(PROCESSOR)),x86, \
+            $(PROCESSOR)))) \
+        -DCPU=$(PROCESSOR) \
+        -DCC=$(if $(IS_LLVM),clang,gcc) \
+        -DCXX=$(if $(IS_LLVM),clang++,g++) \
         -DINPUT='$(PWD)/plugins/meson-wrapper/conf/mxe-crossfile.meson.in' \
         -DOUTPUT='$(PREFIX)/$(TARGET)/share/meson/mxe-crossfile.meson'
 
From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Sat, 17 Jul 2021 15:00:00 +0200
Subject: [PATCH 2/7] Improve meson wrapper


diff --git a/plugins/meson-wrapper/conf/mxe-crossfile.meson.in b/plugins/meson-wrapper/conf/mxe-crossfile.meson.in
index 1111111..2222222 100644
--- a/plugins/meson-wrapper/conf/mxe-crossfile.meson.in
+++ b/plugins/meson-wrapper/conf/mxe-crossfile.meson.in
@@ -20,6 +20,16 @@ glib-compile-resources = '@PREFIX@/@TARGET@/bin/glib-compile-resources'
 [properties]
 needs_exe_wrapper = true
 
+[built-in options]
+bindir = 'bin'
+includedir = 'include'
+libdir = 'lib'
+libexecdir = 'bin'
+prefix = '@PREFIX@/@TARGET@'
+buildtype = 'release'
+default_library = '@LIBTYPE@'
+strip = @STRIP@
+
 [host_machine]
 system = 'windows'
 cpu_family = '@CPU_FAMILY@'
diff --git a/plugins/meson-wrapper/conf/target-meson.in b/plugins/meson-wrapper/conf/target-meson.in
index 1111111..2222222 100644
--- a/plugins/meson-wrapper/conf/target-meson.in
+++ b/plugins/meson-wrapper/conf/target-meson.in
@@ -11,9 +11,5 @@ if [[ "$NO_MESON_CROSSFILE" == "1" ]]; then
     exec meson "$@"
 else
     echo "== Using Meson cross file: @MESON_CROSS_FILE@"
-    exec meson \
-              --cross-file "@MESON_CROSS_FILE@" \
-              --default-library "@LIBTYPE@" \
-              --prefix "@PREFIX@/@TARGET@" \
-              "$@"
+    exec meson --cross-file "@MESON_CROSS_FILE@" "$@"
 fi
diff --git a/plugins/meson-wrapper/meson-wrapper.mk b/plugins/meson-wrapper/meson-wrapper.mk
index 1111111..2222222 100644
--- a/plugins/meson-wrapper/meson-wrapper.mk
+++ b/plugins/meson-wrapper/meson-wrapper.mk
@@ -14,6 +14,7 @@ define $(PKG)_BUILD
         -DLIBTYPE=$(if $(BUILD_SHARED),shared,static) \
         -DPREFIX=$(PREFIX) \
         -DTARGET=$(TARGET) \
+        -DSTRIP=$(if $(STRIP_LIB),true,false) \
         -DBUILD=$(BUILD) \
         -DCPU_FAMILY=$(strip \
             $(if $(findstring armv7,$(PROCESSOR)),arm, \
@@ -26,10 +27,8 @@ define $(PKG)_BUILD
 
     # create the prefixed Meson wrapper script
     cmake-configure-file \
-        -DLIBTYPE=$(if $(BUILD_SHARED),shared,static) \
         -DPREFIX=$(PREFIX) \
         -DTARGET=$(TARGET) \
-        -DBUILD=$(BUILD) \
         -DMESON_CROSS_FILE='$(PREFIX)/$(TARGET)/share/meson/mxe-crossfile.meson' \
         -DINPUT='$(PWD)/plugins/meson-wrapper/conf/target-meson.in' \
         -DOUTPUT='$(PREFIX)/bin/$(TARGET)-meson'

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Sun, 18 Jul 2021 11:30:00 +0200
Subject: [PATCH 3/7] Ensure grep is non-recursive and done only on *.mk files

For example, this prevents all files under log/, usr/, pkg/, etc.
from being grep'd when MXE_PLUGIN_DIRS is set to $PWD.

diff --git a/mxe.updates.mk b/mxe.updates.mk
index 1111111..2222222 100644
--- a/mxe.updates.mk
+++ b/mxe.updates.mk
@@ -24,9 +24,9 @@ define GET_LATEST_VERSION
     tail -1
 endef
 
-ALL_DIRS := $(MXE_PLUGIN_DIRS) $(shell find $(realpath $(TOP_DIR)/plugins) -type d)
+ALL_DIRS := $(MXE_PLUGIN_DIRS) $(shell find $(realpath $(TOP_DIR)/plugins) -mindepth 1 -type d)
 GET_LATEST_VERSION_PKGS := $(sort \
-    $(basename $(notdir $(shell grep -l GET_LATEST_VERSION -r $(ALL_DIRS)))))
+    $(basename $(notdir $(shell grep -s -l GET_LATEST_VERSION $(addsuffix /*.mk,$(ALL_DIRS))))))
 
 .PHONY: check-get-latest-version
 check-get-latest-version:
 
From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Sun, 18 Jul 2021 12:00:00 +0200
Subject: [PATCH 4/7] Use recursively expanded variables where possible

This should be safe in terms of performance, since these variables
are evaluated only once.

diff --git a/mxe.patch.mk b/mxe.patch.mk
index 1111111..2222222 100644
--- a/mxe.patch.mk
+++ b/mxe.patch.mk
@@ -115,9 +115,9 @@ $(PREFIX)/installed/patch/%:
 	@touch '$@'
 
 
-PATCH_FORMAT_PATCHES := $(shell find $(MXE_PLUGIN_DIRS) plugins -name "*-$(PATCH_NAME).patch")
-PATCH_FORMAT_PKGS    := $(sort $(subst -$(PATCH_NAME),,$(basename $(notdir $(PATCH_FORMAT_PATCHES)))))
-PATCH_FORMAT_DIRS    := $(sort $(basename $(dir $(PATCH_FORMAT_PATCHES))))
+PATCH_FORMAT_PATCHES = $(shell find $(MXE_PLUGIN_DIRS) plugins -name "*-$(PATCH_NAME).patch")
+PATCH_FORMAT_PKGS    = $(sort $(subst -$(PATCH_NAME),,$(basename $(notdir $(PATCH_FORMAT_PATCHES)))))
+PATCH_FORMAT_DIRS    = $(sort $(basename $(dir $(PATCH_FORMAT_PATCHES))))
 
 .PHONY: refresh-patches
 refresh-patches:
diff --git a/mxe.updates.mk b/mxe.updates.mk
index 1111111..2222222 100644
--- a/mxe.updates.mk
+++ b/mxe.updates.mk
@@ -24,8 +24,8 @@ define GET_LATEST_VERSION
     tail -1
 endef
 
-ALL_DIRS := $(MXE_PLUGIN_DIRS) $(shell find $(realpath $(TOP_DIR)/plugins) -mindepth 1 -type d)
-GET_LATEST_VERSION_PKGS := $(sort \
+ALL_DIRS = $(MXE_PLUGIN_DIRS) $(shell find $(realpath $(TOP_DIR)/plugins) -mindepth 1 -type d)
+GET_LATEST_VERSION_PKGS = $(sort \
     $(basename $(notdir $(shell grep -s -l GET_LATEST_VERSION $(addsuffix /*.mk,$(ALL_DIRS))))))
 
 .PHONY: check-get-latest-version

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Tue, 3 Mar 2020 15:00:00 +0100
Subject: [PATCH 5/7] Update libffi test

See:
http://www.chiark.greenend.org.uk/doc/libffi-dev/html/Simple-Example.html#Simple-Example

diff --git a/src/libffi-test.c b/src/libffi-test.c
index 1111111..2222222 100644
--- a/src/libffi-test.c
+++ b/src/libffi-test.c
@@ -5,26 +5,30 @@
 #include <stdio.h>
 #include <ffi.h>
 
-int main(int argc, char *argv[])
+int main()
 {
     ffi_cif cif;
     ffi_type *args[1];
     void *values[1];
     char *s;
-    int rc;
-
-    (void)argc;
-    (void)argv;
+    ffi_arg rc;
 
+    /* Initialize the argument info vectors */
     args[0] = &ffi_type_pointer;
     values[0] = &s;
 
-    if (ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 1,
-                           &ffi_type_uint, args) == FFI_OK)
+    /* Initialize the cif */
+    if (ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 1,
+                           &ffi_type_sint, args) == FFI_OK)
     {
         s = "Hello World!";
         ffi_call(&cif, FFI_FN(puts), &rc, values);
-        s = "Goodbye!";
+        /* rc now holds the result of the call to puts */
+
+        /* values holds a pointer to the function's arg, so to
+           call puts() again all we need to do is change the
+           value of s */
+        s = "This is cool!";
         ffi_call(&cif, FFI_FN(puts), &rc, values);
     }
 
From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Tue, 2 Mar 2021 13:00:00 +0100
Subject: [PATCH 6/7] Allow networking when MXE_ENABLE_NETWORK is set


diff --git a/Makefile b/Makefile
index 1111111..2222222 100644
--- a/Makefile
+++ b/Makefile
@@ -705,6 +705,7 @@ $(foreach PKG,$(PKGS),$(eval $(call PKG_RULE,$(PKG),$(call TMP_DIR,$(PKG)))))
 ifeq ($(findstring darwin,$(BUILD)),)
     NONET_LIB := $(PREFIX)/$(BUILD)/lib/nonetwork.so
     PRELOAD   := LD_PRELOAD='$(NONET_LIB)'
+    NONET_LDFLAGS := -ldl
 else
     NONET_LIB := $(PREFIX)/$(BUILD)/lib/nonetwork.dylib
     PRELOAD   := DYLD_FORCE_FLAT_NAMESPACE=1 DYLD_INSERT_LIBRARIES='$(NONET_LIB)' \
@@ -714,7 +715,7 @@ endif
 
 $(NONET_LIB): $(TOP_DIR)/tools/nonetwork.c | $(PREFIX)/$(BUILD)/lib/.gitkeep
 	@$(PRINTF_FMT) '[nonet lib]' '$@'
-	+@$(BUILD_CC) -shared -fPIC $(NONET_CFLAGS) -o $@ $<
+	+@$(BUILD_CC) -shared -fPIC $(NONET_CFLAGS) $< -o $@ $(NONET_LDFLAGS)
 
 .PHONY: nonet-lib
 nonet-lib: $(NONET_LIB)
diff --git a/tools/nonetwork.c b/tools/nonetwork.c
index 1111111..2222222 100644
--- a/tools/nonetwork.c
+++ b/tools/nonetwork.c
@@ -3,53 +3,138 @@
 // Copyright (C) 2015 Boris Nagaev
 // License: MIT
 
+#define _GNU_SOURCE // required to get RTLD_NEXT defined
+
 #include <errno.h>
 #include <stdio.h>
 #include <stdlib.h>
+#include <dlfcn.h>
+
+int (*real_connect)(int sock, const void *addr, unsigned int len);
+void *(*real_gethostbyname)(const char *name);
+int (*real_getaddrinfo)(const char *node, const char *service,
+                        const void *hints, void **res);
+void (*real_freeaddrinfo)(void *res);
+int (*real_getnameinfo)(const void *sa, unsigned int salen, char *host,
+                        unsigned int hostlen, char *serv, unsigned int servlen,
+                        int flags);
+struct hostent *(*real_gethostbyaddr)(const void *addr, unsigned int len,
+                                      int type);
+
+int enable;
+int silent;
+
+__attribute__((constructor)) void init(void) {
+  if (getenv("MXE_SILENT_NO_NETWORK"))
+    silent = 1;
+
+  if (!getenv("MXE_ENABLE_NETWORK"))
+    return;
+
+  real_connect = dlsym(RTLD_NEXT, "connect");
+  if (!real_connect) {
+    fprintf(stderr, "dlsym(real_connect) failed: %s\n", dlerror());
+    exit(1);
+  }
+
+  real_gethostbyname = dlsym(RTLD_NEXT, "gethostbyname");
+  if (!real_gethostbyname) {
+    fprintf(stderr, "dlsym(gethostbyname) failed: %s\n", dlerror());
+    exit(1);
+  }
+
+  real_getaddrinfo = dlsym(RTLD_NEXT, "getaddrinfo");
+  if (!real_getaddrinfo) {
+    fprintf(stderr, "dlsym(getaddrinfo) failed: %s\n", dlerror());
+    exit(1);
+  }
+
+  real_freeaddrinfo = dlsym(RTLD_NEXT, "freeaddrinfo");
+  if (!real_freeaddrinfo) {
+    fprintf(stderr, "dlsym(freeaddrinfo) failed: %s\n", dlerror());
+    exit(1);
+  }
+
+  real_getnameinfo = dlsym(RTLD_NEXT, "getnameinfo");
+  if (!real_getnameinfo) {
+    fprintf(stderr, "dlsym(getnameinfo) failed: %s\n", dlerror());
+    exit(1);
+  }
+
+  real_gethostbyaddr = dlsym(RTLD_NEXT, "gethostbyaddr");
+  if (!real_gethostbyaddr) {
+    fprintf(stderr, "dlsym(gethostbyaddr) failed: %s\n", dlerror());
+    exit(1);
+  }
+
+  enable = 1;
+}
 
 static void print_message() {
-    if(getenv("MXE_SILENT_NO_NETWORK")) {
-    } else {
-        fflush(stderr);
-        fprintf(stderr, "\nDon't use network from MXE build rules!\n");
-        fprintf(stderr, "\tSilent mode for scripts reading stderr into variables:\n");
-        fprintf(stderr, "\t\tMXE_SILENT_NO_NETWORK= make ...\n");
-        fflush(stderr);
-    }
+  if (!silent) {
+    fflush(stderr);
+    fprintf(stderr, "\nDon't use network from MXE build rules!\n");
+    fprintf(stderr,
+            "\tSilent mode for scripts reading stderr into variables:\n");
+    fprintf(stderr, "\t\tMXE_SILENT_NO_NETWORK= make ...\n");
+    fflush(stderr);
+  }
 }
 
 int connect(int sock, const void *addr, unsigned int len) {
+  if (!enable) {
     print_message();
     errno = 13; // EACCES, Permission denied
     return -1;
+  }
+
+  return real_connect(sock, addr, len);
 }
 
 void *gethostbyname(const char *name) {
+  if (!enable) {
     print_message();
     return 0;
+  }
+
+  return real_gethostbyname(name);
 }
 
-int getaddrinfo(const char *node, const char *service,
-                const void *hints,
+int getaddrinfo(const char *node, const char *service, const void *hints,
                 void **res) {
+  if (!enable) {
     print_message();
     return -4; // EAI_FAIL
+  }
+
+  return real_getaddrinfo(node, service, hints, res);
 }
 
 void freeaddrinfo(void *res) {
+  if (!enable) {
     print_message();
+    return;
+  }
+
+  real_freeaddrinfo(res);
 }
 
-int getnameinfo(const void * sa,
-                unsigned int salen, char * host,
-                unsigned int hostlen, char * serv,
-                unsigned int servlen, int flags) {
+int getnameinfo(const void *sa, unsigned int salen, char *host,
+                unsigned int hostlen, char *serv, unsigned int servlen,
+                int flags) {
+  if (!enable) {
     print_message();
     return -4; // EAI_FAIL
+  }
+
+  return real_getnameinfo(sa, salen, host, hostlen, serv, servlen, flags);
 }
 
-struct hostent *gethostbyaddr(const void *addr, unsigned int len,
-                              int type) {
+struct hostent *gethostbyaddr(const void *addr, unsigned int len, int type) {
+  if (!enable) {
     print_message();
     return 0;
+  }
+
+  return real_gethostbyaddr(addr, len, type);
 }

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Wed, 19 Jan 2022 13:00:00 +0100
Subject: [PATCH 7/7] Ensure downloads are not skipped when SKIP_CHECKSUM is set


diff --git a/Makefile b/Makefile
index 1111111..2222222 100644
--- a/Makefile
+++ b/Makefile
@@ -309,12 +309,15 @@ endef
 PKG_CHECKSUM = \
     $(OPENSSL) dgst -sha256 '$(or $(2),$(PKG_DIR)/$($(1)_FILE))' 2>/dev/null | $(SED) -n 's,^.*\([0-9a-f]\{64\}\)$$,\1,p'
 
-CHECK_PKG_ARCHIVE = \
+CHECK_PKG_ARCHIVE_NO_SKIP = \
     $(if $($(1)_SOURCE_TREE),\
         $(PRINTF_FMT) '[local]' '$(1)' '$($(1)_SOURCE_TREE)' | $(RTRIM)\
-    $(else),$(if $(SKIP_CHECKSUM),true, \
+    $(else), \
         [ '$($(1)_CHECKSUM)' == "`$$(call PKG_CHECKSUM,$(1),$(2))`" ]\
-    ))
+    )
+
+CHECK_PKG_ARCHIVE = \
+	$(if $(SKIP_CHECKSUM),true,$(call CHECK_PKG_ARCHIVE_NO_SKIP,$(1),$(2)))
 
 ESCAPE_PKG = \
 	echo '$($(1)_FILE)' | perl -lpe 's/([^A-Za-z0-9])/sprintf("%%%02X", ord($$$$1))/seg'
@@ -671,7 +674,7 @@ download-only-$(1): download-only-$($(1)_FILE)
 download-only-$($(1)_FILE)::
 	$(and $($(1)_URL),
 	@$$(if $$(REMOVE_DOWNLOAD),rm -f '$(PKG_DIR)/$($(1)_FILE)')
-	@if ! $(call CHECK_PKG_ARCHIVE,$(1)); then \
+	@if ! $(call CHECK_PKG_ARCHIVE_NO_SKIP,$(1)); then \
 	    $(PRINTF_FMT) '[download]' '$($(1)_FILE)' | $(RTRIM); \
 	    [ -d '$(LOG_DIR)/$(TIMESTAMP)' ] || mkdir -p '$(LOG_DIR)/$(TIMESTAMP)'; \
 	    ($(call DOWNLOAD_PKG_ARCHIVE,$(1))) &> '$(LOG_DIR)/$(TIMESTAMP)/$(1)-download'; \

This file is part of MXE. See LICENSE.md for licensing information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Wed, 10 Jun 2020 13:15:00 +0200
Subject: [PATCH 1/4] Ensure DLLs are installed in the bin directory


diff --git a/build/cmake/aom_install.cmake b/build/cmake/aom_install.cmake
index 1111111..2222222 100644
--- a/build/cmake/aom_install.cmake
+++ b/build/cmake/aom_install.cmake
@@ -81,16 +81,21 @@ macro(setup_aom_install_targets)
     # Setup the install rules.
     install(
       FILES ${AOM_INSTALL_INCS}
-      DESTINATION "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}/aom")
+      DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/aom)
     install(
       FILES "${AOM_PKG_CONFIG_FILE}"
-      DESTINATION "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/pkgconfig")
-    install(TARGETS ${AOM_INSTALL_LIBS} DESTINATION
-                    "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
-
+      DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
+    install(TARGETS ${AOM_INSTALL_LIBS}
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    )
     if(ENABLE_EXAMPLES)
-      install(TARGETS ${AOM_INSTALL_BINS} DESTINATION
-                      "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}")
+      install(TARGETS ${AOM_INSTALL_BINS}
+		  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+		  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+		  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+      )
     endif()
   endif()
 endmacro()

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Wed, 10 Jun 2020 14:50:00 +0200
Subject: [PATCH 2/4] Prefer native win32 threading functionality


diff --git a/build/cmake/aom_configure.cmake b/build/cmake/aom_configure.cmake
index 1111111..2222222 100644
--- a/build/cmake/aom_configure.cmake
+++ b/build/cmake/aom_configure.cmake
@@ -218,6 +218,12 @@ aom_get_inline("INLINE")
 # Don't just check for pthread.h, but use the result of the full pthreads
 # including a linking check in FindThreads above.
 set(HAVE_PTHREAD_H ${CMAKE_USE_PTHREADS_INIT})
+
+# Prefer native win32 threading functionality.
+if(CMAKE_USE_WIN32_THREADS_INIT)
+  set(HAVE_PTHREAD_H 0)
+endif()
+
 aom_check_source_compiles("unistd_check" "#include <unistd.h>" HAVE_UNISTD_H)
 
 if(NOT MSVC)

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Wed, 10 Jun 2020 21:00:00 +0200
Subject: [PATCH 3/4] Disable version script on llvm-mingw


diff --git a/build/cmake/exports.cmake b/build/cmake/exports.cmake
index 1111111..2222222 100644
--- a/build/cmake/exports.cmake
+++ b/build/cmake/exports.cmake
@@ -54,11 +54,11 @@ function(setup_exports_target)
                  APPEND_STRING
                  PROPERTY LINK_FLAGS "-exported_symbols_list ${aom_sym_file}")
   elseif(WIN32)
-    if(NOT MSVC)
+    if(CMAKE_C_COMPILER_ID MATCHES GNU)
       set_property(TARGET aom
                    APPEND_STRING
                    PROPERTY LINK_FLAGS "-Wl,--version-script ${aom_sym_file}")
-    else()
+    elseif(MSVC)
       set_property(TARGET aom
                    APPEND_STRING
                    PROPERTY LINK_FLAGS "/DEF:${aom_sym_file}")

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Thu, 8 Oct 2020 19:40:00 +0200
Subject: [PATCH 4/4] Ensure ESP is aligned on 16-byte boundaries on x86

Reference:
https://sourceforge.net/p/mingw-w64/mailman/message/35294616/
https://chromium-review.googlesource.com/c/webm/libvpx/+/364140

diff --git a/aom_ports/mem.h b/aom_ports/mem.h
index 1111111..2222222 100644
--- a/aom_ports/mem.h
+++ b/aom_ports/mem.h
@@ -24,6 +24,17 @@
 #define DECLARE_ALIGNED(n, typ, val) typ val
 #endif
 
+/* force_align_arg_pointer is required for proper function arguments aligning
+ * when SSE code is used. Some systems (Windows, QNX) do not guarantee our
+ * thread functions will be properly aligned on the stack, even though GCC may
+ * generate code with the assumption that it is. */
+#if defined(__GNUC__) && defined(__i386__) && \
+    (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
+#define FORCE_ALIGN __attribute__((force_align_arg_pointer))
+#else
+#define FORCE_ALIGN
+#endif
+
 /* Indicates that the usage of the specified variable has been audited to assure
  * that it's safe to use uninitialized. Silences 'may be used uninitialized'
  * warnings on gcc.
diff --git a/aom_util/aom_thread.h b/aom_util/aom_thread.h
index 1111111..2222222 100644
--- a/aom_util/aom_thread.h
+++ b/aom_util/aom_thread.h
@@ -19,6 +19,8 @@
 
 #include "config/aom_config.h"
 
+#include "aom_ports/mem.h"
+
 #ifdef __cplusplus
 extern "C" {
 #endif
@@ -52,7 +54,7 @@ typedef CONDITION_VARIABLE pthread_cond_t;
 // simplistic pthread emulation layer
 
 // _beginthreadex requires __stdcall
-#define THREADFN unsigned int __stdcall
+#define THREADFN FORCE_ALIGN unsigned int __stdcall
 #define THREAD_RETURN(val) (unsigned int)((DWORD_PTR)val)
 
 static INLINE int pthread_create(pthread_t *const thread, const void *attr,
diff --git a/av1/decoder/decodeframe.c b/av1/decoder/decodeframe.c
index 1111111..2222222 100644
--- a/av1/decoder/decodeframe.c
+++ b/av1/decoder/decodeframe.c
@@ -5195,6 +5195,7 @@ static AOM_INLINE void setup_frame_info(AV1Decoder *pbi) {
   }
 }
 
+FORCE_ALIGN
 void av1_decode_tg_tiles_and_wrapup(AV1Decoder *pbi, const uint8_t *data,
                                     const uint8_t *data_end,
                                     const uint8_t **p_data_end, int start_tile,
diff --git a/av1/encoder/encoder.c b/av1/encoder/encoder.c
index 1111111..2222222 100644
--- a/av1/encoder/encoder.c
+++ b/av1/encoder/encoder.c
@@ -6551,6 +6551,7 @@ static int encode_frame_to_data_rate(AV1_COMP *cpi, size_t *size,
   return AOM_CODEC_OK;
 }
 
+FORCE_ALIGN
 int av1_encode(AV1_COMP *const cpi, uint8_t *const dest,
                const EncodeFrameInput *const frame_input,
                const EncodeFrameParams *const frame_params,

This file is part of MXE. See LICENSE.md for licensing information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: "fix@me" <fix@me>
Date: Fri, 24 Sep 2010 23:34:26 +0200
Subject: [PATCH 1/4] s,DllMain,static _disabled_DllMain,


diff --git a/gsf/gsf-utils.c b/gsf/gsf-utils.c
index 1111111..2222222 100644
--- a/gsf/gsf-utils.c
+++ b/gsf/gsf-utils.c
@@ -76,9 +76,9 @@ static GTypeModule *static_type_module = NULL;
 #include <windows.h>
 static HMODULE gsf_dll_hmodule;
 BOOL WINAPI
-DllMain (HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved);
+static _disabled_DllMain (HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved);
 BOOL WINAPI
-DllMain (HINSTANCE hinstDLL, DWORD fdwReason, G_GNUC_UNUSED LPVOID lpvReserved)
+static _disabled_DllMain (HINSTANCE hinstDLL, DWORD fdwReason, G_GNUC_UNUSED LPVOID lpvReserved)
 {
 	if (fdwReason == DLL_PROCESS_ATTACH) gsf_dll_hmodule = hinstDLL;
 	return TRUE;

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Mon, 25 Nov 2019 20:20:00 +0100
Subject: [PATCH 2/4] Simplify ISO 8601 parser

By using g_date_time_new_from_iso8601 and g_date_time_format_iso8601.

diff --git a/configure.ac b/configure.ac
index 1111111..2222222 100644
--- a/configure.ac
+++ b/configure.ac
@@ -303,14 +303,6 @@ AC_DEFINE(HAVE_2ARG_STATFS, 1, [Define if you have two-argument statfs like linu
 
 AC_CHECK_FUNCS(chown setrlimit)
 
-AC_CHECK_FUNCS(gmtime_r, [],
-	       [AC_CHECK_FUNCS(gmtime,
-	       		       [AC_MSG_WARN(*** Please note that gmtime_r() is missing and I will use gmtime() which is not thread safe ***)],
-			       [AC_MSG_ERROR([Neither gmtime_r or gmtime is available])])])
-
-AC_CHECK_MEMBERS(struct tm.tm_gmtoff,,,
-[#include <time.h>])
-
 SAVE_CFLAGS=$CFLAGS
 SAVE_LIBS=$LIBS
 CFLAGS="$CFLAGS $LIBGSF_CFLAGS"
diff --git a/gsf/gsf-timestamp.c b/gsf/gsf-timestamp.c
index 1111111..2222222 100644
--- a/gsf/gsf-timestamp.c
+++ b/gsf/gsf-timestamp.c
@@ -25,9 +25,6 @@
 
 #include <string.h>
 #include <time.h>
-#ifdef G_OS_WIN32
-#include <windows.h>
-#endif
 
 static void
 timestamp_to_string (GValue const *src_value, GValue *dest_value)
@@ -93,9 +90,7 @@ gsf_timestamp_free (GsfTimestamp *stamp)
  * @stamp: #GsfTimestamp
  * @spec: The string to parse
  *
- * Very simple parser for time stamps.  Currently requires a format of
- * 	'YYYY-MM-DDThh:mm:ss'
- * and does only rudimentary range checking
+ * Parser for time stamps. Requires a ISO 8601 formatted string.
  *
  * Since: 1.14.24
  *
@@ -104,29 +99,12 @@ gsf_timestamp_free (GsfTimestamp *stamp)
 int
 gsf_timestamp_load_from_string (GsfTimestamp *stamp, char const *spec)
 {
-	guint year, month, day, hour, minute;
-	float second;
+	GTimeZone *utc;
 	GDateTime *dt;
 
-	/* 'YYYY-MM-DDThh:mm:ss' */
-	if (6 != sscanf (spec, "%u-%u-%uT%u:%u:%f",
-			 &year, &month, &day, &hour, &minute, &second))
-		return FALSE;
-
-	/* g_date_time_new_utc documentation says: */
-	/* It not considered a programmer error for the values to this function to be out of range,*/
-	/* but in the case that they are, the function will return NULL. */
-	/* Nevertheless it seems to fail on values that are extremely out of range, see bug #702671 */
-	if (second < 0.0 || second >= 60.0)
-		return FALSE;
-	if (minute > 59 || hour > 23)
-		return FALSE;
-	if (day > 32 || month > 12 || year > 9999)
-		return FALSE;
-
-	dt = g_date_time_new_utc ((int)year, (int)month, (int)day, (int)hour, (int)minute, second);
-	if (!dt)
-		return FALSE;
+	utc = g_time_zone_new_utc ();
+	dt = g_date_time_new_from_iso8601 (spec, utc);
+	g_time_zone_unref (utc);
 
 	stamp->timet = g_date_time_to_unix (dt);
 
@@ -139,9 +117,7 @@ gsf_timestamp_load_from_string (GsfTimestamp *stamp, char const *spec)
  * @spec: The string to parse
  * @stamp: #GsfTimestamp
  *
- * Very simple parser for time stamps.  Currently requires a format of
- * 	'YYYY-MM-DDThh:mm:ss'
- * and does no bounds checking.
+ * Parser for time stamps. Requires a ISO 8601 formatted string.
  *
  * Deprecated: 1.14.24, use gsf_timestamp_load_from_string
  *
@@ -158,9 +134,7 @@ gsf_timestamp_from_string (char const *spec, GsfTimestamp *stamp)
  * @spec: The string to parse
  * @stamp: #GsfTimestamp
  *
- * Very simple parser for time stamps.  Currently requires a format of
- * 	'YYYY-MM-DDThh:mm:ss'
- * and does no bounds checking.
+ * Parser for time stamps. Requires a ISO 8601 formatted string.
  *
  * Deprecated: Use gsf_timestamp_load_from_string
  *
@@ -184,24 +158,16 @@ gsf_timestamp_parse (char const *spec, GsfTimestamp *stamp)
 char *
 gsf_timestamp_as_string	(GsfTimestamp const *stamp)
 {
-	time_t    t;
-	struct tm tm;
+	GDateTime *dt;
+	gchar *iso8601_string;
 
 	g_return_val_if_fail (stamp != NULL, g_strdup ("<invalid>"));
 
-	t = stamp->timet;	/* Use an honest time_t for gmtime_r.  */
-#ifdef HAVE_GMTIME_R
-	gmtime_r (&t, &tm);
-#else
-	/* -NOT- thread-safe */
-	tm = *gmtime (&t);
-#endif
-
+	dt = g_date_time_new_from_unix_utc (stamp->timet);
+	iso8601_string = g_date_time_format_iso8601 (dt);
+	g_date_time_unref (dt);
 
-	/* using 'YYYY-MM-DDThh:mm:ss' */
-	return g_strdup_printf ("%4d-%02d-%02dT%02d:%02d:%02dZ",
-		tm.tm_year+1900, tm.tm_mon+1, tm.tm_mday,
-		tm.tm_hour, tm.tm_min, tm.tm_sec);
+    return iso8601_string;
 }
 
 guint

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Mon, 2 Mar 2020 17:00:00 +0100
Subject: [PATCH 3/4] Revert "Attempt ARM fix."

This reverts commit 2e7e842fd277fbbbf3f943dfd8511a7eee6721f3.

diff --git a/gsf/gsf-utils.c b/gsf/gsf-utils.c
index 1111111..2222222 100644
--- a/gsf/gsf-utils.c
+++ b/gsf/gsf-utils.c
@@ -29,17 +29,6 @@
 #include <ctype.h>
 #include <string.h>
 
-/*
- * Glib gets this wrong, really.  ARM's floating point format is a weird
- * mixture.
- */
-#define G_ARMFLOAT_ENDIAN 56781234
-#if defined(__arm__) && !defined(__ARM_EABI__) && (G_BYTE_ORDER == G_LITTLE_ENDIAN)
-#define G_FLOAT_BYTE_ORDER G_ARMFLOAT_ENDIAN
-#else
-#define G_FLOAT_BYTE_ORDER G_BYTE_ORDER
-#endif
-
 gboolean
 gsf_debug_flag (const char *flag)
 {
@@ -361,7 +350,7 @@ gsf_le_get_guint64 (void const *p)
 float
 gsf_le_get_float (void const *p)
 {
-#if G_FLOAT_BYTE_ORDER == G_BIG_ENDIAN
+#if G_BYTE_ORDER == G_BIG_ENDIAN
 	if (sizeof (float) == 4) {
 		float   f;
 		int     i;
@@ -376,7 +365,7 @@ gsf_le_get_float (void const *p)
 	} else {
 		g_error ("Big endian machine, but weird size of floats");
 	}
-#elif (G_FLOAT_BYTE_ORDER == G_LITTLE_ENDIAN) || (G_FLOAT_BYTE_ORDER == G_ARMFLOAT_ENDIAN)
+#elif G_BYTE_ORDER == G_LITTLE_ENDIAN
 	if (sizeof (float) == 4) {
 		/*
 		 * On i86, we could access directly, but Alphas require
@@ -403,7 +392,7 @@ gsf_le_get_float (void const *p)
 void
 gsf_le_set_float (void *p, float f)
 {
-#if G_FLOAT_BYTE_ORDER == G_BIG_ENDIAN
+#if G_BYTE_ORDER == G_BIG_ENDIAN
 	if (sizeof (float) == 4) {
 		int     i;
 		guint8 *t  = (guint8 *)&f;
@@ -415,7 +404,7 @@ gsf_le_set_float (void *p, float f)
 	} else {
 		g_error ("Big endian machine, but weird size of floats");
 	}
-#elif (G_FLOAT_BYTE_ORDER == G_LITTLE_ENDIAN) || (G_FLOAT_BYTE_ORDER == G_ARMFLOAT_ENDIAN)
+#elif G_BYTE_ORDER == G_LITTLE_ENDIAN
 	if (sizeof (float) == 4) {
 		/*
 		 * On i86, we could access directly, but Alphas require
@@ -441,12 +430,7 @@ gsf_le_set_float (void *p, float f)
 double
 gsf_le_get_double (void const *p)
 {
-#if G_FLOAT_BYTE_ORDER == G_ARMFLOAT_ENDIAN
-	double data;
-	memcpy ((char *)&data + 4, p, 4);
-	memcpy ((char *)&data, (char const *)p + 4, 4);
-	return data;
-#elif G_FLOAT_BYTE_ORDER == G_BIG_ENDIAN
+#if G_BYTE_ORDER == G_BIG_ENDIAN
 	if (sizeof (double) == 8) {
 		double  d;
 		int     i;
@@ -461,7 +445,7 @@ gsf_le_get_double (void const *p)
 	} else {
 		g_error ("Big endian machine, but weird size of doubles");
 	}
-#elif G_FLOAT_BYTE_ORDER == G_LITTLE_ENDIAN
+#elif G_BYTE_ORDER == G_LITTLE_ENDIAN
 	if (sizeof (double) == 8) {
 		/*
 		 * On i86, we could access directly, but Alphas require
@@ -488,10 +472,7 @@ gsf_le_get_double (void const *p)
 void
 gsf_le_set_double (void *p, double d)
 {
-#if G_FLOAT_BYTE_ORDER == G_ARMFLOAT_ENDIAN
-	memcpy (p, (char const *)&d + 4, 4);
-	memcpy ((char *)p + 4, &d, 4);
-#elif G_FLOAT_BYTE_ORDER == G_BIG_ENDIAN
+#if G_BYTE_ORDER == G_BIG_ENDIAN
 	if (sizeof (double) == 8) {
 		int     i;
 		guint8 *t  = (guint8 *)&d;
@@ -503,7 +484,7 @@ gsf_le_set_double (void *p, double d)
 	} else {
 		g_error ("Big endian machine, but weird size of doubles");
 	}
-#elif G_FLOAT_BYTE_ORDER == G_LITTLE_ENDIAN
+#elif G_BYTE_ORDER == G_LITTLE_ENDIAN
 	if (sizeof (double) == 8) {
 		/*
 		 * On i86, we could access directly, but Alphas require

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Morten Welinder <terra@gnome.org>
Date: Sat, 2 May 2020 21:24:12 -0400
Subject: [PATCH 4/4] Compilation: fix win32 build


diff --git a/gsf/Makefile.am b/gsf/Makefile.am
index 1111111..2222222 100644
--- a/gsf/Makefile.am
+++ b/gsf/Makefile.am
@@ -18,8 +18,7 @@ EXTRA_DIST = libgsf.syms
 libgsf_1_la_LIBADD  = $(LIBGSF_LIBS) $(Z_LIBS) $(BZ2_LIBS)
 libgsf_1_la_LDFLAGS = -version-info $(VERSION_INFO) -export-symbols $(srcdir)/libgsf.syms
 if WITH_WIN32
-  libgsf_1_la_DEPENDENCIES = lib.def
-  libgsf_1_la_LDFLAGS += -no-undefined -export-symbols lib.def
+  libgsf_1_la_LDFLAGS += -no-undefined
 endif
 
 libgsf_1_la_SOURCES =		\

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Tue, 6 Oct 2020 14:55:00 +0200
Subject: [PATCH 1/1] Improve aom encode error reporting

Upstream-Status: Pending

diff --git a/libheif/heif_encoder_aom.cc b/libheif/heif_encoder_aom.cc
index 1111111..2222222 100644
--- a/libheif/heif_encoder_aom.cc
+++ b/libheif/heif_encoder_aom.cc
@@ -79,6 +79,10 @@ static const char* const kParam_tune_valid_values[] = {
     "psnr", "ssim"
 };
 
+static struct heif_error heif_error_codec_library_error = {heif_error_Encoder_plugin_error,
+                                                           heif_suberror_Unspecified,
+                                                           "aom error"};
+
 static const int AOM_PLUGIN_PRIORITY = 40;
 
 #define MAX_PLUGIN_NAME_LENGTH 80
@@ -226,6 +230,15 @@ static void aom_init_plugin()
   aom_init_parameters();
 }
 
+static void aom_log_error(aom_codec_ctx_t *ctx, const char *s)
+{
+  const char *detail = aom_codec_error_detail(ctx);
+
+  printf("%s: %s\n", s, aom_codec_error(ctx));
+  if (detail) {
+    printf("    %s\n", detail);
+  }
+}
 
 static void aom_cleanup_plugin()
 {
@@ -527,9 +540,8 @@ void aom_query_encoded_size(void* encoder, uint32_t input_width, uint32_t input_
 
 
 // TODO: encode as still frame (seq header)
-static int encode_frame(aom_codec_ctx_t* codec, aom_image_t* img)
-{
-  int got_pkts = 0;
+static heif_error encode_frame(aom_codec_ctx_t* codec, aom_image_t* img)
+{;
   //aom_codec_iter_t iter = NULL;
   int frame_index = 0; // only encoding a single frame
   int flags = 0; // no flags
@@ -537,11 +549,11 @@ static int encode_frame(aom_codec_ctx_t* codec, aom_image_t* img)
   //const aom_codec_cx_pkt_t *pkt = NULL;
   const aom_codec_err_t res = aom_codec_encode(codec, img, frame_index, 1, flags);
   if (res != AOM_CODEC_OK) {
-    printf("Failed to encode frame\n");
-    assert(0);
+    aom_log_error(codec, "Failed to encode frame");
+    return heif_error_codec_library_error;
   }
 
-  return got_pkts;
+  return heif_error_ok;
 }
 
 
@@ -550,6 +562,8 @@ struct heif_error aom_encode_image(void* encoder_raw, const struct heif_image* i
 {
   struct encoder_struct_aom* encoder = (struct encoder_struct_aom*) encoder_raw;
 
+  struct heif_error err;
+
   // --- round image size to minimum size
 
   uint32_t rounded_width, rounded_height;
@@ -561,11 +575,9 @@ struct heif_error aom_encode_image(void* encoder_raw, const struct heif_image* i
 
   bool success = image->image->extend_to_size(rounded_width, rounded_height);
   if (!success) {
-    struct heif_error err = {
-        heif_error_Memory_allocation_error,
-        heif_suberror_Unspecified,
-        kError_out_of_memory
-    };
+    err = {heif_error_Memory_allocation_error,
+           heif_suberror_Unspecified,
+           kError_out_of_memory};
     return err;
   }
 
@@ -607,8 +619,10 @@ struct heif_error aom_encode_image(void* encoder_raw, const struct heif_image* i
   if (!aom_img_alloc(&input_image, img_format,
                      source_width, source_height, 1)) {
     printf("Failed to allocate image.\n");
-    assert(false);
-    // TODO
+    err = {heif_error_Memory_allocation_error,
+           heif_suberror_Unspecified,
+           kError_out_of_memory};
+    return err;
   }
 
 
@@ -673,9 +687,8 @@ struct heif_error aom_encode_image(void* encoder_raw, const struct heif_image* i
   iface = aom_codec_av1_cx();
   //encoder->encoder = get_aom_encoder_by_name("av1");
   if (!iface) {
-    printf("Unsupported codec.");
-    assert(false);
-    // TODO
+    printf("Unsupported codec: %s\n", aom_codec_iface_name(iface));
+    return heif_error_codec_library_error;
   }
 
 
@@ -688,13 +701,12 @@ struct heif_error aom_encode_image(void* encoder_raw, const struct heif_image* i
   aom_codec_enc_cfg_t cfg;
   aom_codec_err_t res = aom_codec_enc_config_default(iface, &cfg, aomUsage);
   if (res) {
-    printf("Failed to get default codec config.\n");
-    assert(0);
-    // TODO
+    printf("Failed to get default codec config: %s\n", aom_codec_err_to_string(res));
+    return heif_error_codec_library_error;
   }
 
   heif::Box_av1C::configuration inout_config;
-  heif::Error err = heif::fill_av1C_configuration(&inout_config, image->image);
+  heif::fill_av1C_configuration(&inout_config, image->image);
 
   cfg.g_w = source_width;
   cfg.g_h = source_height;
@@ -721,9 +733,8 @@ struct heif_error aom_encode_image(void* encoder_raw, const struct heif_image* i
   }
 
   if (aom_codec_enc_init(&codec, iface, &cfg, encoder_flags)) {
-    printf("Failed to initialize encoder\n");
-    assert(0);
-    // TODO
+    aom_log_error(&codec, "Failed to initialize encoder");
+    return heif_error_codec_library_error;
   }
 
   aom_codec_control(&codec, AOME_SET_CPUUSED, encoder->cpu_used);
@@ -757,13 +768,16 @@ struct heif_error aom_encode_image(void* encoder_raw, const struct heif_image* i
 
   // --- encode frame
 
-  encode_frame(&codec, &input_image); //, frame_count++, flags, writer);
+  err = encode_frame(&codec, &input_image); //, frame_count++, flags, writer);
+  if (err.code != heif_error_Ok) {
+    return err;
+  }
 
   int flags = 0;
   res = aom_codec_encode(&codec, NULL, -1, 0, flags);
   if (res != AOM_CODEC_OK) {
-    printf("Failed to encode frame\n");
-    assert(0);
+    aom_log_error(&codec, "Failed to encode frame");
+    return heif_error_codec_library_error;
   }
 
   encoder->compressedData.clear();
@@ -798,9 +812,8 @@ struct heif_error aom_encode_image(void* encoder_raw, const struct heif_image* i
   aom_img_free(&input_image);
 
   if (aom_codec_destroy(&codec)) {
-    printf("Failed to destroy codec.\n");
-    assert(0);
-    // TODO
+    aom_log_error(&codec, "Failed to destroy codec");
+    return heif_error_codec_library_error;
   }
 
   return heif_error_ok;

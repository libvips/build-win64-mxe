From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Wed, 5 May 2021 21:00:00 +0200
Subject: [PATCH 1/4] Add `armv7-pc-windows-gnullvm` target

Upstream-Status: Inappropriate [enable feature]
Upstream only accepts Rust targets that are available in stable releases.

diff --git a/vendor/cfg-expr/src/targets/builtins.rs b/vendor/cfg-expr/src/targets/builtins.rs
index 1111111..2222222 100644
--- a/vendor/cfg-expr/src/targets/builtins.rs
+++ b/vendor/cfg-expr/src/targets/builtins.rs
@@ -741,6 +741,19 @@ pub const ALL_BUILTINS: &[TargetInfo] = &[
         has_atomics: HasAtomics::atomic_8_16_32_64_ptr,
         panic: Panic::unwind,
     },
+    TargetInfo {
+        triple: Triple::new_const("armv7-pc-windows-gnullvm"),
+        os: Some(Os::windows),
+        abi: None,
+        arch: Arch::arm,
+        env: Some(Env::gnu),
+        vendor: Some(Vendor::pc),
+        families: Families::windows,
+        pointer_width: 32,
+        endian: Endian::little,
+        has_atomics: HasAtomics::atomic_8_16_32_64_ptr,
+        panic: Panic::unwind,
+    },
     TargetInfo {
         triple: Triple::new_const("armv7-sony-vita-newlibeabihf"),
         os: Some(Os::vita),

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Mon, 21 Sep 2020 11:00:00 +0200
Subject: [PATCH 2/4] Fix linker error on `armv7-pc-windows-gnullvm`

Details:
lld-link: error: undefined symbol: __aeabi_idiv
>>> referenced by libcompiler_builtins-<HASH>.rlib(<O_FILE>):(__aeabi_idivmod)

Upstream-Status: Pending

diff --git a/vendor/compiler_builtins/build.rs b/vendor/compiler_builtins/build.rs
index 1111111..2222222 100644
--- a/vendor/compiler_builtins/build.rs
+++ b/vendor/compiler_builtins/build.rs
@@ -427,7 +427,7 @@ mod c {
             }
         }
 
-        if target.arch == "arm" && target.vendor != "apple" && target.env != "msvc" {
+        if target.arch == "arm" && target.vendor != "apple" && target.os != "windows" {
             sources.extend(&[
                 ("__aeabi_div0", "arm/aeabi_div0.c"),
                 ("__aeabi_drsub", "arm/aeabi_drsub.c"),

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Tue, 15 Feb 2022 11:38:18 +0100
Subject: [PATCH 3/4] Use appropriate fix/float aliases on llvm-mingw

See: https://github.com/llvm/llvm-project/commit/e6407356ba008e474322d52b7d031f65fa4913fc

Details:
ld.lld: error: duplicate symbol: __floatundisf
>>> defined at libclang_rt.builtins-arm.a(floatundisf.c.obj)
>>> defined at libcompiler_builtins-<HASH>.rlib(<O_FILE>)

ld.lld: error: duplicate symbol: __floatundidf
>>> defined at libclang_rt.builtins-arm.a(floatundidf.c.obj)
>>> defined at libcompiler_builtins-<HASH>.rlib(<O_FILE>)

ld.lld: error: duplicate symbol: __floatdisf
>>> defined at libclang_rt.builtins-arm.a(floatdisf.c.obj)
>>> defined at libcompiler_builtins-<HASH>.rlib(<O_FILE>)

ld.lld: error: duplicate symbol: __floatdidf
>>> defined at libclang_rt.builtins-arm.a(floatdidf.c.obj)
>>> defined at libcompiler_builtins-<HASH>.rlib(<O_FILE>)

ld.lld: error: duplicate symbol: __fixunsdfdi
>>> defined at libclang_rt.builtins-arm.a(fixunsdfdi.c.obj)
>>> defined at libcompiler_builtins-<HASH>.rlib(<O_FILE>)

ld.lld: error: duplicate symbol: __fixdfdi
>>> defined at libclang_rt.builtins-arm.a(fixdfdi.c.obj)
>>> defined at libcompiler_builtins-<HASH>.rlib(<O_FILE>)

ld.lld: error: duplicate symbol: __fixsfdi
>>> defined at libclang_rt.builtins-arm.a(fixsfdi.c.obj)
>>> defined at libcompiler_builtins-<HASH>.rlib(<O_FILE>)

ld.lld: error: duplicate symbol: __fixunssfdi
>>> defined at libclang_rt.builtins-arm.a(fixunssfdi.c.obj)
>>> defined at libcompiler_builtins-<HASH>.rlib(<O_FILE>)

Upstream-Status: Inappropriate [Windows specific]
This is Windows specific and would break compatibility with other Rust ARMv7 targets.

diff --git a/vendor/compiler_builtins/src/float/conv.rs b/vendor/compiler_builtins/src/float/conv.rs
index 1111111..2222222 100644
--- a/vendor/compiler_builtins/src/float/conv.rs
+++ b/vendor/compiler_builtins/src/float/conv.rs
@@ -88,12 +88,12 @@ intrinsics! {
         f64::from_bits(int_to_float::u32_to_f64_bits(i))
     }
 
-    #[arm_aeabi_alias = __aeabi_ul2f]
+    #[arm_aeabi_alias = __u64tos]
     pub extern "C" fn __floatundisf(i: u64) -> f32 {
         f32::from_bits(int_to_float::u64_to_f32_bits(i))
     }
 
-    #[arm_aeabi_alias = __aeabi_ul2d]
+    #[arm_aeabi_alias = __u64tod]
     pub extern "C" fn __floatundidf(i: u64) -> f64 {
         f64::from_bits(int_to_float::u64_to_f64_bits(i))
     }
@@ -123,13 +123,13 @@ intrinsics! {
         f64::from_bits(int_to_float::u32_to_f64_bits(i.unsigned_abs()) | sign_bit)
     }
 
-    #[arm_aeabi_alias = __aeabi_l2f]
+    #[arm_aeabi_alias = __i64tos]
     pub extern "C" fn __floatdisf(i: i64) -> f32 {
         let sign_bit = ((i >> 63) as u32) << 31;
         f32::from_bits(int_to_float::u64_to_f32_bits(i.unsigned_abs()) | sign_bit)
     }
 
-    #[arm_aeabi_alias = __aeabi_l2d]
+    #[arm_aeabi_alias = __i64tod]
     pub extern "C" fn __floatdidf(i: i64) -> f64 {
         let sign_bit = ((i >> 63) as u64) << 63;
         f64::from_bits(int_to_float::u64_to_f64_bits(i.unsigned_abs()) | sign_bit)
@@ -237,7 +237,7 @@ intrinsics! {
         float_to_unsigned_int(f)
     }
 
-    #[arm_aeabi_alias = __aeabi_f2ulz]
+    #[arm_aeabi_alias = __stou64]
     pub extern "C" fn __fixunssfdi(f: f32) -> u64 {
         float_to_unsigned_int(f)
     }
@@ -252,7 +252,7 @@ intrinsics! {
         float_to_unsigned_int(f)
     }
 
-    #[arm_aeabi_alias = __aeabi_d2ulz]
+    #[arm_aeabi_alias = __dtou64]
     pub extern "C" fn __fixunsdfdi(f: f64) -> u64 {
         float_to_unsigned_int(f)
     }
@@ -288,7 +288,7 @@ intrinsics! {
         float_to_signed_int(f)
     }
 
-    #[arm_aeabi_alias = __aeabi_f2lz]
+    #[arm_aeabi_alias = __stoi64]
     pub extern "C" fn __fixsfdi(f: f32) -> i64 {
         float_to_signed_int(f)
     }
@@ -303,7 +303,7 @@ intrinsics! {
         float_to_signed_int(f)
     }
 
-    #[arm_aeabi_alias = __aeabi_d2lz]
+    #[arm_aeabi_alias = __dtoi64]
     pub extern "C" fn __fixdfdi(f: f64) -> i64 {
         float_to_signed_int(f)
     }

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Sat, 17 Feb 2024 10:37:54 +0100
Subject: [PATCH 4/4] Fix build errors on `armv7-pc-windows-gnullvm`

Details:
error[E0412]: cannot find type `WSADATA` in this scope
    --> vendor/windows-sys/src/Windows/Win32/Networking/WinSock/mod.rs:198:104
     |
198  | ::windows_targets::link!("ws2_32.dll" "system" fn WSAStartup(wversionrequested : u16, lpwsadata : *mut WSADATA) -> i32);
     |                                                                                                        ^^^^^^^ help: a struct with a similar name exists: `WSPDATA`
...
6380 | pub struct WSPDATA {
     | ------------------ similarly named struct `WSPDATA` defined here

error[E0412]: cannot find type `SERVENT` in this scope
   --> vendor/windows-sys/src/Windows/Win32/Networking/WinSock/mod.rs:272:144
    |
272 | ...PCSTR, proto : ::windows_sys::core::PCSTR) -> *mut SERVENT);
    |                                                       ^^^^^^^ not found in this scope

error[E0412]: cannot find type `SERVENT` in this scope
   --> vendor/windows-sys/src/Windows/Win32/Networking/WinSock/mod.rs:273:121
    |
273 | ::windows_targets::link!("ws2_32.dll" "system" fn getservbyport(port : i32, proto : ::windows_sys::core::PCSTR) -> *mut SERVENT);
    |                                                                                                                         ^^^^^^^ not found in this scope

Upstream-Status: Pending

diff --git a/vendor/windows-sys/src/Windows/Win32/Networking/WinSock/mod.rs b/vendor/windows-sys/src/Windows/Win32/Networking/WinSock/mod.rs
index 1111111..2222222 100644
--- a/vendor/windows-sys/src/Windows/Win32/Networking/WinSock/mod.rs
+++ b/vendor/windows-sys/src/Windows/Win32/Networking/WinSock/mod.rs
@@ -4762,16 +4762,16 @@ impl ::core::clone::Clone for SERVENT {
     }
 }
 #[repr(C)]
-#[cfg(target_arch = "x86")]
+#[cfg(any(target_arch = "arm", target_arch = "x86"))]
 pub struct SERVENT {
     pub s_name: ::windows_sys::core::PSTR,
     pub s_aliases: *mut *mut i8,
     pub s_port: i16,
     pub s_proto: ::windows_sys::core::PSTR,
 }
-#[cfg(target_arch = "x86")]
+#[cfg(any(target_arch = "arm", target_arch = "x86"))]
 impl ::core::marker::Copy for SERVENT {}
-#[cfg(target_arch = "x86")]
+#[cfg(any(target_arch = "arm", target_arch = "x86"))]
 impl ::core::clone::Clone for SERVENT {
     fn clone(&self) -> Self {
         *self
@@ -5933,7 +5933,7 @@ impl ::core::clone::Clone for WSADATA {
     }
 }
 #[repr(C)]
-#[cfg(target_arch = "x86")]
+#[cfg(any(target_arch = "arm", target_arch = "x86"))]
 pub struct WSADATA {
     pub wVersion: u16,
     pub wHighVersion: u16,
@@ -5943,9 +5943,9 @@ pub struct WSADATA {
     pub iMaxUdpDg: u16,
     pub lpVendorInfo: ::windows_sys::core::PSTR,
 }
-#[cfg(target_arch = "x86")]
+#[cfg(any(target_arch = "arm", target_arch = "x86"))]
 impl ::core::marker::Copy for WSADATA {}
-#[cfg(target_arch = "x86")]
+#[cfg(any(target_arch = "arm", target_arch = "x86"))]
 impl ::core::clone::Clone for WSADATA {
     fn clone(&self) -> Self {
         *self

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Wed, 5 May 2021 21:00:00 +0200
Subject: [PATCH 1/3] Add llvm-mingw ARM/ARM64 targets


diff --git a/vendor/cfg-expr/src/targets/builtins.rs b/vendor/cfg-expr/src/targets/builtins.rs
index 1111111..2222222 100644
--- a/vendor/cfg-expr/src/targets/builtins.rs
+++ b/vendor/cfg-expr/src/targets/builtins.rs
@@ -93,6 +93,16 @@ pub const ALL_BUILTINS: &[TargetInfo] = &[
         pointer_width: 64,
         endian: Endian::little,
     },
+    TargetInfo {
+        triple: Triple::new_const("aarch64-pc-windows-gnu"),
+        os: Some(Os::windows),
+        arch: Arch::aarch64,
+        env: Some(Env::gnu),
+        vendor: Some(Vendor::pc),
+        family: Some(Family::windows),
+        pointer_width: 64,
+        endian: Endian::little,
+    },
     TargetInfo {
         triple: Triple::new_const("aarch64-pc-windows-msvc"),
         os: Some(Os::windows),
@@ -413,6 +423,16 @@ pub const ALL_BUILTINS: &[TargetInfo] = &[
         pointer_width: 32,
         endian: Endian::little,
     },
+    TargetInfo {
+        triple: Triple::new_const("armv7-pc-windows-gnu"),
+        os: Some(Os::windows),
+        arch: Arch::arm,
+        env: Some(Env::gnu),
+        vendor: Some(Vendor::pc),
+        family: Some(Family::windows),
+        pointer_width: 32,
+        endian: Endian::little,
+    },
     TargetInfo {
         triple: Triple::new_const("armv7-unknown-freebsd"),
         os: Some(Os::freebsd),

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Mon, 21 Sep 2020 11:00:00 +0200
Subject: [PATCH 2/3] Ensure that compiler_builtins can be successfully built on
 llvm-mingw

Fixes an undefined symbol error while linking the compiler_builtins crate on
llvm-mingw (targeting ARMv7).

Details:
lld-link: error: undefined symbol: __aeabi_idiv
>>> referenced by libcompiler_builtins-<HASH>.rlib(<O_FILE>):(__aeabi_idivmod)

diff --git a/vendor/compiler_builtins/build.rs b/vendor/compiler_builtins/build.rs
index 1111111..2222222 100644
--- a/vendor/compiler_builtins/build.rs
+++ b/vendor/compiler_builtins/build.rs
@@ -318,7 +318,7 @@ mod c {
             }
         }
 
-        if target_arch == "arm" && target_os != "ios" && target_env != "msvc" {
+        if target_arch == "arm" && target_os != "ios" && target_os != "windows" {
             sources.extend(&[
                 ("__aeabi_div0", "arm/aeabi_div0.c"),
                 ("__aeabi_drsub", "arm/aeabi_drsub.c"),

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Tue, 15 Feb 2022 11:38:18 +0100
Subject: [PATCH 3/3] Use appropriate fix/float aliases on llvm-mingw

See: https://github.com/llvm/llvm-project/commit/e6407356ba008e474322d52b7d031f65fa4913fc

diff --git a/vendor/compiler_builtins/src/float/conv.rs b/vendor/compiler_builtins/src/float/conv.rs
index 1111111..2222222 100644
--- a/vendor/compiler_builtins/src/float/conv.rs
+++ b/vendor/compiler_builtins/src/float/conv.rs
@@ -86,7 +86,7 @@ intrinsics! {
     }
 
     #[maybe_use_optimized_c_shim]
-    #[arm_aeabi_alias = __aeabi_l2f]
+    #[arm_aeabi_alias = __i64tos]
     pub extern "C" fn __floatdisf(i: i64) -> f32 {
         // On x86_64 LLVM will use native instructions for this conversion, we
         // can just do it directly
@@ -98,7 +98,7 @@ intrinsics! {
     }
 
     #[maybe_use_optimized_c_shim]
-    #[arm_aeabi_alias = __aeabi_l2d]
+    #[arm_aeabi_alias = __i64tod]
     pub extern "C" fn __floatdidf(i: i64) -> f64 {
         // On x86_64 LLVM will use native instructions for this conversion, we
         // can just do it directly
@@ -120,13 +120,13 @@ intrinsics! {
     }
 
     #[maybe_use_optimized_c_shim]
-    #[arm_aeabi_alias = __aeabi_ul2f]
+    #[arm_aeabi_alias = __u64tos]
     pub extern "C" fn __floatundisf(i: u64) -> f32 {
         int_to_float(i)
     }
 
     #[maybe_use_optimized_c_shim]
-    #[arm_aeabi_alias = __aeabi_ul2d]
+    #[arm_aeabi_alias = __u64tod]
     pub extern "C" fn __floatundidf(i: u64) -> f64 {
         int_to_float(i)
     }
@@ -199,7 +199,7 @@ intrinsics! {
         float_to_int(f)
     }
 
-    #[arm_aeabi_alias = __aeabi_f2lz]
+    #[arm_aeabi_alias = __stoi64]
     pub extern "C" fn __fixsfdi(f: f32) -> i64 {
         float_to_int(f)
     }
@@ -209,7 +209,7 @@ intrinsics! {
         float_to_int(f)
     }
 
-    #[arm_aeabi_alias = __aeabi_d2lz]
+    #[arm_aeabi_alias = __dtoi64]
     pub extern "C" fn __fixdfdi(f: f64) -> i64 {
         float_to_int(f)
     }
@@ -219,7 +219,7 @@ intrinsics! {
         float_to_int(f)
     }
 
-    #[arm_aeabi_alias = __aeabi_f2ulz]
+    #[arm_aeabi_alias = __stou64]
     pub extern "C" fn __fixunssfdi(f: f32) -> u64 {
         float_to_int(f)
     }
@@ -229,7 +229,7 @@ intrinsics! {
         float_to_int(f)
     }
 
-    #[arm_aeabi_alias = __aeabi_d2ulz]
+    #[arm_aeabi_alias = __dtou64]
     pub extern "C" fn __fixunsdfdi(f: f64) -> u64 {
         float_to_int(f)
     }

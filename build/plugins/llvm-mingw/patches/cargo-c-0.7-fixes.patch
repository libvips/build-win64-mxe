From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Sat, 2 Jan 2021 20:00:00 +0100
Subject: [PATCH 1/3] Add llvm-mingw ARM/ARM64 dlltool targets


diff --git a/src/build.rs b/src/build.rs
index 1111111..2222222 100644
--- a/src/build.rs
+++ b/src/build.rs
@@ -229,6 +229,8 @@ fn build_implib_file(
         let binutils_arch = match arch.as_str() {
             "x86_64" => "i386:x86-64",
             "x86" => "i386",
+            "thumbv7a" => "arm",
+            "aarch64" => "arm64",
             _ => unimplemented!("Windows support for {} is not implemented yet.", arch),
         };
 
From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Sat, 2 Jan 2021 21:30:00 +0100
Subject: [PATCH 2/3] Fix compatibility with llvm-mingw

Drop the '-Wl,' prefix (since we run ld.lld directly) and use
a more compatible output-def style (i.e. 's/,/=/').

diff --git a/src/target.rs b/src/target.rs
index 1111111..2222222 100644
--- a/src/target.rs
+++ b/src/target.rs
@@ -87,7 +87,7 @@ impl Target {
         } else if os == "windows" && env == "gnu" {
             // This is only set up to work on GNU toolchain versions of Rust
             lines.push(format!(
-                "-Wl,--output-def,{}",
+                "--output-def={}",
                 target_dir.join(format!("{}.def", lib_name)).display()
             ));
         }

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Wed, 3 Mar 2021 12:00:00 +0100
Subject: [PATCH 3/3] Enable nightly Cargo features by default

This allows cargo-c to handle the -Zbuild-std feature flag.

diff --git a/src/bin/capi.rs b/src/bin/capi.rs
index 1111111..2222222 100644
--- a/src/bin/capi.rs
+++ b/src/bin/capi.rs
@@ -6,10 +6,13 @@ use cargo::util::command_prelude::opt;
 use cargo::util::command_prelude::ArgMatchesExt;
 use cargo::CliResult;
 use cargo::Config;
+use cargo::core::enable_nightly_features;
 
 use structopt::clap::*;
 
 fn main() -> CliResult {
+    enable_nightly_features();
+
     let mut config = Config::default()?;
 
     let cli_build = subcommand_cli("build", "Build the crate C-API");
diff --git a/src/bin/cbuild.rs b/src/bin/cbuild.rs
index 1111111..2222222 100644
--- a/src/bin/cbuild.rs
+++ b/src/bin/cbuild.rs
@@ -1,6 +1,7 @@
 use cargo::util::command_prelude::ArgMatchesExt;
 use cargo::CliResult;
 use cargo::Config;
+use cargo::core::enable_nightly_features;
 
 use cargo_c::build::*;
 use cargo_c::cli::subcommand_cli;
@@ -8,6 +9,8 @@ use cargo_c::cli::subcommand_cli;
 use structopt::clap::*;
 
 fn main() -> CliResult {
+    enable_nightly_features();
+
     let mut config = Config::default()?;
 
     let subcommand = subcommand_cli("cbuild", "Build the crate C-API");
diff --git a/src/bin/cinstall.rs b/src/bin/cinstall.rs
index 1111111..2222222 100644
--- a/src/bin/cinstall.rs
+++ b/src/bin/cinstall.rs
@@ -1,6 +1,7 @@
 use cargo::util::command_prelude::ArgMatchesExt;
 use cargo::CliResult;
 use cargo::Config;
+use cargo::core::enable_nightly_features;
 
 use cargo_c::build::{cbuild, config_configure};
 use cargo_c::cli::subcommand_cli;
@@ -9,6 +10,8 @@ use cargo_c::install::cinstall;
 use structopt::clap::*;
 
 fn main() -> CliResult {
+    enable_nightly_features();
+
     let mut config = Config::default()?;
 
     let subcommand = subcommand_cli("cinstall", "Install the crate C-API");
diff --git a/src/bin/ctest.rs b/src/bin/ctest.rs
index 1111111..2222222 100644
--- a/src/bin/ctest.rs
+++ b/src/bin/ctest.rs
@@ -1,6 +1,7 @@
 use cargo::util::command_prelude::*;
 use cargo::CliResult;
 use cargo::Config;
+use cargo::core::enable_nightly_features;
 
 use cargo_c::build::*;
 use cargo_c::cli::subcommand_test;
@@ -8,6 +9,8 @@ use cargo_c::cli::subcommand_test;
 use structopt::clap::*;
 
 fn main() -> CliResult {
+    enable_nightly_features();
+
     let mut config = Config::default()?;
 
     let subcommand = subcommand_test("ctest");

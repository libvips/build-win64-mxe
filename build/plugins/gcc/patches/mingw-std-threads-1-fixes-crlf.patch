From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jamaika1 <lukaszcz18@wp.pl>
Date: Tue, 19 Jan 2021 10:09:07 +0100
Subject: [PATCH 1/1] Fix: conflicts with a previous declaration in GCC 11

https://github.com/gcc-mirror/gcc/commit/93e79ed391b9c636f087e6eb7e70f14963cd10ad#diff-5a6ec96bdb4bb5cbf2f6b26682e74429c1900ca5852e9b1a87a65eb70d79f41a
```
../mingw.mutex.h:479:24: error: 'class mingw_stdthread::once_flag' conflicts with a previous declaration
  479 | using mingw_stdthread::once_flag;
      |                        ^~~~~~~~~
In file included from ../mingw.mutex.h:40,
                 from ../mingw.condition_variable.h:52,
                 from threadpool.h:36,
                 from threadpool.cc:15:
c:\msys1100\include\c++\11.0.0\mutex:673:10: note: previous declaration 'struct std::once_flag'
  673 |   struct once_flag
      |          ^~~~~~~~~
```

diff --git a/mingw.mutex.h b/mingw.mutex.h
index 1111111..2222222 100644
--- a/mingw.mutex.h
+++ b/mingw.mutex.h
@@ -440,6 +440,7 @@ class timed_mutex: recursive_timed_mutex
 typedef recursive_timed_mutex timed_mutex;
 #endif
 
+#if defined(__GNUC__) && __GNUC__ < 11
 class once_flag
 {
 //    When available, the SRW-based mutexes should be faster than the
@@ -470,6 +471,7 @@ void call_once(once_flag& flag, Callable&& func, Args&&... args)
     detail::invoke(std::forward<Callable>(func),std::forward<Args>(args)...);
     flag.mHasRun.store(true, std::memory_order_release);
 }
+#endif
 } //  Namespace mingw_stdthread
 
 //  Push objects into std, but only if they are not already there.
@@ -480,13 +482,15 @@ namespace std
 //  was none. Direct specification (std::), however, would be unaffected.
 //    Take the safe option, and include only in the presence of MinGW's win32
 //  implementation.
-#if defined(__MINGW32__ ) && !defined(_GLIBCXX_HAS_GTHREADS)
+#if defined(__GNUC__) && defined(__MINGW32__) && !defined(_GLIBCXX_HAS_GTHREADS)
 using mingw_stdthread::recursive_mutex;
 using mingw_stdthread::mutex;
 using mingw_stdthread::recursive_timed_mutex;
 using mingw_stdthread::timed_mutex;
+#if __GNUC__ < 11
 using mingw_stdthread::once_flag;
 using mingw_stdthread::call_once;
+#endif
 #elif !defined(MINGW_STDTHREAD_REDUNDANCY_WARNING)  //  Skip repetition
 #define MINGW_STDTHREAD_REDUNDANCY_WARNING
 #pragma message "This version of MinGW seems to include a win32 port of\

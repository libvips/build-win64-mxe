This file is part of MXE. See LICENSE.md for licensing information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Fri, 12 Jun 2020 11:20:00 +0200
Subject: [PATCH 1/2] Fixes for the llvm-mingw ARM/ARM64 build


diff --git a/source/CMakeLists.txt b/source/CMakeLists.txt
index 1111111..2222222 100644
--- a/source/CMakeLists.txt
+++ b/source/CMakeLists.txt
@@ -40,7 +40,7 @@ SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake" "${CMAKE_MODULE_PATH}")
 # System architecture detection
 string(TOLOWER "${CMAKE_SYSTEM_PROCESSOR}" SYSPROC)
 set(X86_ALIASES x86 i386 i686 x86_64 amd64)
-set(ARM_ALIASES armv6l armv7l aarch64)
+set(ARM_ALIASES armv6l armv7l armv7 aarch64)
 list(FIND X86_ALIASES "${SYSPROC}" X86MATCH)
 list(FIND ARM_ALIASES "${SYSPROC}" ARMMATCH)
 set(POWER_ALIASES ppc64 ppc64le)
@@ -239,11 +239,12 @@ if(GCC)
         endif()
     endif()
     if(ARM AND CROSS_COMPILE_ARM)
-        if(ARM64)
-            set(ARM_ARGS -fPIC)
-        else()
-            set(ARM_ARGS -march=armv6 -mfloat-abi=soft -mfpu=vfp -marm -fPIC)
+        if(NOT ARM64)
+            set(ARM_ARGS -march=armv6 -mfloat-abi=soft -mfpu=vfp -marm)
         endif()
+        if(ENABLE_PIC)
+            set(ARM_ARGS ${ARM_ARGS} -fPIC)
+        endif(ENABLE_PIC)
         message(STATUS "cross compile arm")
     elseif(ARM)
         if(ARM64)
diff --git a/source/common/aarch64/asm.S b/source/common/aarch64/asm.S
index 1111111..2222222 100644
--- a/source/common/aarch64/asm.S
+++ b/source/common/aarch64/asm.S
@@ -32,15 +32,13 @@
 #ifdef __ELF__
 #define ELF
 #else
-#define ELF @
+#define ELF #
 #endif
 
-#define HAVE_AS_FUNC 1
-
 #if HAVE_AS_FUNC
 #define FUNC
 #else
-#define FUNC @
+#define FUNC #
 #endif
 
 .macro function name, export=1
diff --git a/source/common/cpu.cpp b/source/common/cpu.cpp
index 1111111..2222222 100644
--- a/source/common/cpu.cpp
+++ b/source/common/cpu.cpp
@@ -42,6 +42,15 @@
 #if X265_ARCH_ARM && !defined(HAVE_NEON)
 #include <signal.h>
 #include <setjmp.h>
+
+#ifdef __MINGW32__
+// Windows does not have sigjmp_buf, sigsetjmp and siglongjmp its
+// functionality is provided by plain jmp_buf, setjmp and longjmp.
+#define sigjmp_buf jmp_buf
+#define sigsetjmp(env, savemask) setjmp(env)
+#define siglongjmp(env, val) longjmp(env, val)
+#endif
+
 static sigjmp_buf jmpbuf;
 static volatile sig_atomic_t canjump = 0;
 
@@ -325,7 +334,7 @@ uint32_t cpu_detect(bool benableavx512 )
     return cpu;
 }
 
-#elif X265_ARCH_ARM
+#elif ENABLE_ASSEMBLY && X265_ARCH_ARM
 
 extern "C" {
 void PFX(cpu_neon_test)(void);
diff --git a/source/dynamicHDR10/CMakeLists.txt b/source/dynamicHDR10/CMakeLists.txt
index 1111111..2222222 100644
--- a/source/dynamicHDR10/CMakeLists.txt
+++ b/source/dynamicHDR10/CMakeLists.txt
@@ -43,7 +43,12 @@ if(GCC)
         endif()
     endif()
     if(ARM AND CROSS_COMPILE_ARM)
-        set(ARM_ARGS -march=armv6 -mfloat-abi=soft -mfpu=vfp -marm -fPIC)
+        if(NOT ARM64)
+            set(ARM_ARGS -march=armv6 -mfloat-abi=soft -mfpu=vfp -marm)
+        endif()
+        if(ENABLE_PIC)
+            set(ARM_ARGS ${ARM_ARGS} -fPIC)
+        endif(ENABLE_PIC)
     elseif(ARM)
         find_package(Neon)
         if(CPU_HAS_NEON)
